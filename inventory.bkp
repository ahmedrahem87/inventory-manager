from flask import Flask, render_template, request, redirect, url_for, flash
from flask_login import LoginManager, UserMixin, login_user, login_required, logout_user
import yaml
import requests
import os
import subprocess

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'  # Change this in production

login_manager = LoginManager()
login_manager.init_app(app)
login_manager.login_view = 'login'

# Dummy user
class User(UserMixin):
    def __init__(self, id):
        self.id = id

@login_manager.user_loader
def load_user(user_id):
    return User(user_id)

INVENTORY_FILE = 'inventory.yaml'
EXPORT_DIR = './exports'

@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        if request.form['username'] == 'admin' and request.form['password'] == 'password':
            user = User(1)
            login_user(user)
            return redirect(url_for('inventory'))
        else:
            flash('Invalid credentials')
    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('login'))

@app.route('/')
@login_required
def inventory():
    if os.path.exists(INVENTORY_FILE):
        with open(INVENTORY_FILE) as f:
            data = yaml.safe_load(f)
    else:
        data = {'devices': []}
    return render_template('inventory.html', inventory=data)

@app.route('/add_device', methods=['POST'])
@login_required
def add_device():
    device = {
        'name': request.form['name'],
        'ip': request.form['ip'],
        'platform': request.form['platform'],
        'username': request.form['username'],
        'password': request.form['password'],
        'groups': request.form['groups'].split(',')
    }

    if os.path.exists(INVENTORY_FILE):
        with open(INVENTORY_FILE) as f:
            data = yaml.safe_load(f)
    else:
        data = {'devices': []}

    data['devices'].append(device)

    with open(INVENTORY_FILE, 'w') as f:
        yaml.dump(data, f)

    export_to_ansible(data)
    export_to_prometheus(data)

    flash('Device added successfully')
    return redirect(url_for('inventory'))

def export_to_ansible(data):
    ansible_data = {'all': {'hosts': {}, 'children': {}}}
    for device in data['devices']:
        ansible_data['all']['hosts'][device['name']] = {
            'ansible_host': device['ip'],
            'ansible_user': device['username'],
            'ansible_password': device['password'],
            'ansible_network_os': device['platform']
        }
        for group in device.get('groups', []):
            ansible_data['all']['children'].setdefault(group, {'hosts': {}})['hosts'][device['name']] = None
    os.makedirs(EXPORT_DIR, exist_ok=True)
    with open(os.path.join(EXPORT_DIR, 'ansible_hosts.yml'), 'w') as f:
        yaml.dump(ansible_data, f)

def export_to_prometheus(data):
    targets = []
    for device in data['devices']:
        targets.append({
            'targets': [device['ip']],
            'labels': {
                'hostname': device['name']
            }
        })
    os.makedirs(EXPORT_DIR, exist_ok=True)
    export_path = os.path.join(EXPORT_DIR, 'snmp_targets.yml')
    with open(export_path, 'w') as f:
        yaml.dump(targets, f)

    try:
        # Copy file
        subprocess.run(['/usr/bin/cp', export_path, '/etc/prometheus/snmp_targets.yml'], check=True, capture_output=True, text=True)
        #print("Copy success:", result.stdout)

        # Reload Prometheus
        response = requests.post('http://localhost:9090/-/reload')
        if response.status_code == 200:
            print("Prometheus config updated and reloaded successfully.")
        else:
            print(f"Reload failed with status code {response.status_code}: {response.text}")
        #result = subprocess.run(['/usr/bin/sudo', '/usr/bin/systemctl', 'reload', 'prometheus'], check=True, capture_output=True, text=True)
        #print("Prometheus config updated and reloaded successfully.")
        #print("Copy success:", result.stdout)
    except subprocess.CalledProcessError as e:
        print(f"Error updating Prometheus config: {e}")
    

    # Overwrite the Prometheus config target    
    #os.system(f'sudo cp {export_path} /etc/prometheus/snmp_targets.yml')
    #os.system('http://localhost:9090/-/reload')

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5001, debug=True)


